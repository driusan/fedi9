#!/bin/rc
rfork

. /bin/fedi9/rclib

cd $home/lib/fedi9/inbox/validated

exiterror=()
fn mvToProcessed {
	base=`{basename $* .body}
	mkdir -p ../processed
	mv $base.^(headers body) ../processed/
}

mkdir -p $home/lib/fedi9/objects
if (! test -e $home/lib/fedi9/objects.db) {
	touch $home/lib/fedi9/objects.db
}
# Use ls instead of the *.body pattern so that
# the empty case gets handled correctly
files=`{ls *.body >[2]/dev/null}
for (file in $files){
	echo File $file
	fedi9/spamcheck $"file
	fedi9/jsonfs
	cat $file > /mnt/json/ctl
	actor=`{getStringKey actor}
	actorobj=`{ndb/query -f $"actorsdb id $"actor}
	activityType=`{getStringKey type}
	if (~ $"actorobj '') {
		echo New actor $actor in $"actorsdb
		fedi9/get $"actor | fedi9/personrecord >> $actorsdb
	}

	switch ($activityType){
	case 'Create'
		echo 'Create'
		if (! test -e /mnt/json/values/object/values/id/value){
			echo Could not determine object id >[1=2]
		}
		if not {
			objid=`{cat /mnt/json/values/object/values/id/value}
			cat /mnt/json/values/object/raw | fedi9/addObjectToDb $objid
			addStatus=$status
			switch($addStatus){
			case ''
				mvToProcessed $file
			case *'already added'
				mvToProcessed $file
			case *
				echo Could not add object $objid to database: "$"addStatus" >[1=2]
			}
		}
	case Update
		echo Update
		objid=`{cat /mnt/json/values/object/values/id/value}
		cachepath=`{ndb/query -f $objectsdb id $"objid cachepath}
		if (~ $cachepath '') {
			echo 'Update unknown object'
			mvToProcessed $file
		}
		if not {
			if (! test -e $fedi9lib/$cachepath) {
				echo 'Path ' $cachepath does not exist >[1=2]
			}
			cp /mnt/json/values/object/raw $fedi9lib/$cachepath
			mvToProcessed $file
		}
	case 'Delete'
		echo 'Delete'
		objid=`{cat /mnt/json/values/object/values/id/value}
		cachepath=`{ndb/query -f $objectsdb id $"objid cachepath}
		if (~ $cachepath '') {
			echo 'Delete unknown object'
			mvToProcessed $file
		}
		if not {
			objtype=`{cat /mnt/json/values/object/values/type/value}
			if(~ $"objtype 'Tombstone'){
				cp /mnt/json/values/object/raw $fedi9lib/$cachepath
				mvToProcessed $file
			}
			if not {
				echo '{}' >$fedi9lib/$cachepath
				mvToProcessed $file
			}
		}
	case 'Follow'
		echo 'Follow'
		reqid=`{getStringKey id}
		cachedreq=`{ndb/query -f $followreqdb id $"reqid id}
		if (~ $"cachedreq '') {
			obj=`{getStringKey object}
			echo 'id='$"reqid ' actor='$"actor 'object='$"obj >> $"followreqdb
			mvToProcessed $file
		}
		if not {
			echo 'Already processed follow req' >[2=1]
			mvToProcessed $file
		}
	case 'Undo'
		echo 'Undo'
		undotype=`{cat /mnt/json/values/object/values/type/value}
		knowntype='false'
		switch($"undotype){
		case 'Follow'
			knowntype='true'
		case 'Announce'
			knowntype='true'
		case *
			echo 'Unhandled Undo of type ' $undotype
			exiterror=($exiterror 'no undotype')
		}
		if (~ $"knowntype 'true') {
			reqid=`{cat /mnt/json/values/object/values/id/value}
			if (test -e $undodb) {
				cachedreq=`{ndb/query -f $undodb id $"reqid id}
			}
			if not {
				cachedreq=''
			}
			if (~ $"cachedreq '') {
				actor=`{cat /mnt/json/values/object/values/actor/value}
				objectid=`{cat /mnt/json/values/object/values/object/value}
				echo 'id='$reqid ' actor='$"actor' object='$"objectid' type='$"undotype >> $undodb
				mvToProcessed $file
			}
			if not {
				echo 'Already processed Undo' >[2=1]
				mvToProcessed $file
			}
		}
	case Accept
		echo 'Accept'
		accepttype=`{cat /mnt/json/values/object/values/type/value}
		switch($"accepttype){
		case Follow
			ndbid=`{ndb/query -f $"actorsdb id $"actor id}
			if (~ $"ndbid '') {
				# We did a fedi9/get for the actor object at the
				# start of this script, this shouldn't happen
				echo Could not find $"actor in $"actorsdb >[1=2]
				exit 'no actor'
			}

			if (test -e $followingdb) {
				dupcheck=`{ndb/query -f $followingdb id $"actor id}
				if (~ $dupcheck '') {
					doInsert=true
				}
				if not {
					# Already in following database
					doInsert=false
				}

			}
			if not {
				# DB didn't exist to query, needs to be created
				doInsert=true
			}

			if (~ $doInsert true) {
				echo id'='$ndbid >> $followingdb
			}
			mvToProcessed $file
		case *
			echo Unhandled Accept type $accepttype >[1=2]
			exiterror=($exiterror 'no accept type')
		}
	case Announce
		echo Announce
		actid=`{getStringKey id}
		publishedTime=`{getStringKey published}
		obj=`{getStringKey object}
		if (~ $"obj ''){
			echo Could not retrieve announce object >[1=2]
			exiterror=($exiterror 'bad announce object')
		}
		if not{
			exists=false
			if (test -e $announcedb){
				if (! ~ `{ndb/query -f $"announcedb id $"actid id} ''){
					exists=true
				}		
			}

			if (~ $exists false){
				cat >> $announcedb << EOR
id=$actid
	type=Announce
	cachepath=../inbox/processed/$file
	actor=$actor
	object=$obj
	publishedTime=$publishedTime
EOR
			}
			mvToProcessed $file
		}
	case Add
		echo Add
		obj=`{getStringKey object}
		target=`{getStringKey target}
		if (~ $"target '' || ~ $"obj ''){
			echo Could not determine Add target or object>[1=2]
			exiterror=($exiterror 'no add target')
		}

		cachepath=`{ndb/query -f $collectionsdb id $"target cachepath}

		if (~ $cachepath '') {
			cname=`{echo $"target | sha1sum -2 256}
			cname=$cname(1)
			echo 'id='$"target ' cachepath=collections/'$cname >> $collectionsdb

			mkdir -p $fedi9lib/collections/$"cname
			cachepath='collections/'$cname
			# mvToProcessed $file
		}
		fname=`{echo $"obj | sha1sum -2 256}
		fname=$fname(1)
		echo $"obj > $fedi9lib/$cachepath/$fname
		mvToProcessed $file
	case Remove
		echo Remove
		obj=`{getStringKey object}
		target=`{getStringKey target}
		if (~ $"target '' || ~ $"obj ''){
			echo Could not determine Remove target or object>[1=2]
			exiterror=($exiterror 'no remove target')
		}
		cachepath=`{ndb/query -f $collectionsdb id $"target cachepath}
		if (~ $cachepath '') {
			echo 'Remove from unknown collection' $"target

		}
		if not {
			fname=`{echo $"obj | sha1sum -2 256}
			fname=$fname(1)
			rm -f $fedi9lib/$cachepath/$fname
		}
		mvToProcessed $file
	case *
		echo Unhandled activity type $activityType >[1=2]
		exiterror=($exiterror 'no activity type')
	}
}
exit $"exiterror
